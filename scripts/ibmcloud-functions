#!/bin/bash

# Loop forever until the status of the cluster $1 equals to $2
# In Concourse, use timeout to limit waiting https://concourse-ci.org/timeout-step-modifier.html
wait-for-state() {
  declare -r name=$1
  declare -r desired_status=$2

  until cluster-state-is "$name" "$desired_status"; do
    cluster-state "$name" | jq --raw-output '.state'
    sleep 10
  done
}

# Exit nonzero unless the cluster $1 is in the status given as $2
cluster-state-is() {
  declare -r name=$1
  declare -r desired_status=$2

  cluster-state "$name" | jq '.state == $status' --arg status "$desired_status" --exit-status >/dev/null
}

# Show details about the cluster
cluster-state() {
  declare -r name=$1
  ibmcloud ks cluster-get "$name" --json
}

# Exit non-zero unless the cluster $1 has non empty ingressHostname
ingress-hostname-is-set() {
  declare -r name=$1
  cluster-state "$name" | jq '.ingressHostname != ""' --exit-status >/dev/null
}

# Loop forever until the the cluster $1 has non empty ingressHostname
# In Concourse, use timeout to limit waiting https://concourse-ci.org/timeout-step-modifier.html
wait-for-ingress-hostname() {
  declare -r name=$1
  until ingress-hostname-is-set "$name"; do
    echo "ingress hostname is empty"
    sleep 10
  done
}

# Log in to the IBM Cloud
ibmcloud-login() {
  ibmcloud login \
    -a https://cloud.ibm.com \
    -u "${IBMCLOUD_USER:?}" \
    -p "${IBMCLOUD_PASSWORD:?}" \
    -c "${IBMCLOUD_ACCOUNT:?}" \
    -r "eu-gb"
}

# Create a new cluster with the name given as $1
create-cluster() {
  declare -r name=$1
  declare -r worker_count=$2
  local kube_version
  kube_version=$(ibmcloud ks versions --show-version Kubernetes --json | jq -r '.kubernetes[] | "\(.major).\(.minor)"' | sort --version-sort | tail -1)

  ibmcloud ks cluster create classic \
    --name "$name" \
    --zone lon06 \
    --machine-type b2c.4x16 \
    --workers "$worker_count" \
    --private-vlan 2447007 \
    --public-vlan 2447005 \
    --kube-version "$kube_version"
}

# Delete the cluster with the name given as $1
delete-cluster() {
  declare -r name=$1

  if cluster-exists "$name"; then
    ibmcloud ks cluster-rm --cluster "$name" -f --force-delete-storage
  fi
}

# Exit nonzero unless the cluster $1 exists
cluster-exists() {
  declare -r name=$1
  ibmcloud ks clusters --json | jq 'any(.[]; .name == $name)' --arg name "$name" --exit-status >/dev/null
}

# Loop forever until the status of the cluster $1 is gone
wait-for-deletion() {
  declare -r name=$1

  until ! cluster-exists "$name"; do
    cluster-state "$name" | jq --raw-output '.masterStatus' || true
    sleep 10
  done
}

export-kubeconfig() {
  declare -r cluster_name=$1
  ibmcloud ks cluster config --cluster "$cluster_name"
}

store-kubeconfig() {
  kubectl config view --flatten >"$1"
}

cluster-exists() {
  declare -r cluster_name=$1
  if [[ "$(ibmcloud ks cluster get "$cluster_name" 2>&1)" =~ "The specified cluster could not be found" ]]; then
    return 1
  fi
  return 0
}
