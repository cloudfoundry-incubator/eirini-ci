jobs:
- name: (( concat "prepare-cluster-" config.cluster.name ))
  plan:
  - in_parallel:
    - get: ci-resources
    - get: (( concat "cluster-" config.cluster.name "-staging-event-created" ))
      trigger: true
      passed: [(( concat "create-cluster-" config.cluster.name ))]
    - get: cluster-state
  - task: download-kubeconfig
    params:
      CLUSTER_NAME: (( grab config.cluster.name ))
      GCP_REGION: (( grab config.gcp.region ))
      GCP_SERVICE_ACCOUNT_JSON: (( grab config.gcp.service-account-json ))
      GCP_ZONE: (( grab config.gcp.zone ))
    config:
      image_resource:
        source:
          repository: google/cloud-sdk
        type: docker-image
      platform: linux
      inputs:
        - name: ci-resources
      outputs:
        - name: kube
      run:
        path: /usr/bin/env
        args:
        - bash
        - -c
        - (( file "../../inline-tasks/gcp-download-kubeconfig.sh" ))
  - task: create-cluster-config
    config:
     platform: linux
     image_resource:
       type: docker-image
       source:
         repository: eirini/ci
     inputs:
       - name: ci-resources
       - name: cluster-state
     outputs:
       - name: state-modified
     params:
       CLUSTER_NAME: (( grab config.cluster.name ))
       CLUSTER_ADMIN_PASSWORD: (( grab config.cluster.admin-password ))
       UAA_ADMIN_CLIENT_SECRET: (( grab config.cluster.uaa-admin-client-secret ))
       NATS_PASSWORD: (( grab config.cluster.nats-password ))
     run:
        path: /usr/bin/env
        args:
        - bash
        - -c
        - (( file "../../inline-tasks/gcp-cluster-config.sh" ))
  - put: cluster-state
    params:
      repository: state-modified
      merge: true
  - task: init-helm
    config:
      image_resource:
        source:
          repository: eirini/ibmcloud
        type: docker-image
      inputs:
      - name: kube
      - name: ci-resources
      platform: linux
      run:
        path: /usr/bin/env
        args:
        - bash
        - -c
        - (( file "../../inline-tasks/init-helm.sh" ))
  - put: (( concat "cluster-" config.cluster.name "-staging-event-ready" ))
    params:
      bump: major
