resources:
- name: eirini-private-config
  type: git
  icon: git
  source:
    branch: master
    private_key: ((github-private-key))
    uri: git@github.com:cloudfoundry/eirini-private-config
- name: postfacto
  icon: egg-easter
  type: github-release
  check_every: 12h
  source:
    owner: pivotal
    repository: postfacto
    globs: package.zip
- name: ci-resources
  icon: git
  type: git
  source:
    branch: master
    uri: https://github.com/cloudfoundry-incubator/eirini-ci
- name: jefe
  icon: git
  type: git
  source:
    branch: master
    uri: https://github.com/herrjulz/jefe
- name: eirinidotcf
  icon: git
  type: git
  source:
    branch: master
    private_key: ((eirinidotcf-private-key))
    uri: git@github.com:eirini-forks/eirinidotcf
- name: every-morning
  icon: alarm
  type: time
  source:
    start: 5:00 AM
    stop: 6:00 AM
- name: every-week
  icon: alarm
  type: time
  source:
    days:
    - Saturday
    start: 5:00 AM
    stop: 6:00 AM

jobs:
- name: unclaim-clusters
  plan:
  - get: every-morning
    trigger: true
  - task: unclaim
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: eirini/ci
          username: (( grab config.dockerhub.user ))
          password: (( grab config.dockerhub.password ))
      params:
          JEFE_ADMIN_PASSWORD: ((jefe-admin-pass))
      run:
        path: bash
        args:
        - -c
        - |
          #!/bin/bash
          set -eoux pipefail

          curl -X PUT -u admin:$JEFE_ADMIN_PASSWORD https://jefe.acceptance.eu-gb.containers.appdomain.cloud/envs/unclaim

  on_failure: (( grab slack-notification.on_failure ))
- name: deploy-jefe
  serial: true
  plan:
  - in_parallel:
    - get: jefe
      trigger: true
    - get: eirini-private-config
  - task: deploy
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: eirini/ci
          username: (( grab config.dockerhub.user ))
          password: (( grab config.dockerhub.password ))
      run:
        path: bash
        args:
        - -c
        - (( file "../../inline-tasks/deploy-jefe.sh" ))
      params:
        JEFE_GITHUB_CLIENT_ID: ((jefe-client-id))
        JEFE_GITHUB_SECRET: ((jefe-client-secret))
        JEFE_DSN: jefeuser:((jefe-dbuser-pass))@tcp(sl-eu-gb-p05.dblayer.com:19522)
        JEFE_O_AUTH_ORG: eirini-forks
        JEFE_ADMIN_PASSWORD: ((jefe-admin-pass))
      inputs:
      - name: jefe
      - name: eirini-private-config
  on_failure: (( grab slack-notification.on_failure ))
- name: deploy-postfacto
  serial: true
  plan:
  - in_parallel:
    - get: postfacto
      trigger: true
    - get: eirini-private-config
    - get: ci-resources
  - task: get-credentials
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: eirini/ibmcloud
          username: (( grab config.dockerhub.user ))
          password: (( grab config.dockerhub.password ))
      run:
        path: bash
        args:
        - -c
        - (( file "../../inline-tasks/get-postfacto-credentials.sh" ))
      inputs:
      - name: eirini-private-config
      - name: ci-resources
      outputs:
      - name: redis-password
    params:
      CLUSTER_NAME: acceptance
      IBMCLOUD_ACCOUNT: ((ibmcloud-account))
      IBMCLOUD_USER: ((ibmcloud-user))
      IBMCLOUD_PASSWORD: ((ibmcloud-password))
  - task: deploy
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: eirini/ci
          username: (( grab config.dockerhub.user ))
          password: (( grab config.dockerhub.password ))
      run:
        path: bash
        args:
        - -c
        - (( file "../../inline-tasks/deploy-postfacto.sh" ))
      inputs:
      - name: postfacto
      - name: eirini-private-config
      - name: ci-resources
      - name: redis-password
  on_failure: (( grab slack-notification.on_failure ))
- name: bump-eirinidotcf-dependencies
  plan:
  - get: every-week
    trigger: true
  - get: eirinidotcf
  - task: bump-eirinidotcf-dependencies
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: eirini/ci
          username: (( grab config.dockerhub.user ))
          password: (( grab config.dockerhub.password ))
      inputs:
        - name: eirinidotcf
      outputs:
        - name: eirinidotcf-updated
      run:
        path: /usr/bin/env
        args:
        - bash
        - -c
        - (( file "../../inline-tasks/bump-yarn-packages.sh" ))
  - put: eirinidotcf
    params:
      repository: eirinidotcf-updated
  on_failure: (( grab slack-notification.on_failure ))
- name: deploy-eirinidotcf
  serial: true
  plan:
  - in_parallel:
    - get: ci-resources
    - get: eirinidotcf
      trigger: true
    - get: eirini-private-config
  - task: download-kubeconfig
    params:
      CLUSTER_NAME: cf4k8s4a8e
      GCP_REGION: ((gcp-region))
      GCP_SERVICE_ACCOUNT_JSON: ((gcp-service-account-json))
      GCP_ZONE: ((gcp-zone))
    config:
      image_resource:
        source:
          repository: google/cloud-sdk
          username: (( grab config.dockerhub.user ))
          password: (( grab config.dockerhub.password ))
        type: docker-image
      platform: linux
      inputs:
        - name: ci-resources
      outputs:
        - name: kube
      run:
        path: /usr/bin/env
        args:
        - bash
        - -c
        - (( file "../../inline-tasks/gcp-download-kubeconfig.sh" ))
  - task: deploy-web
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: eirini/ci
          username: (( grab config.dockerhub.user ))
          password: (( grab config.dockerhub.password ))
      inputs:
        - name: ci-resources
        - name: eirinidotcf
        - name: eirini-private-config
      run:
        path: /usr/bin/env
        args:
        - bash
        - -c
        - (( file "../../inline-tasks/deploy-eirinidotcf.sh" ))
  on_failure: (( grab slack-notification.on_failure ))
